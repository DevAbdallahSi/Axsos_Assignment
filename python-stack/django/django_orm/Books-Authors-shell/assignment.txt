>>> Book.objects.create(title = 'C Sharp')
<Book: Book object (1)>
>>> Book.objects.create(title = 'Java')
<Book: Book object (2)>
>>> Book.objects.create(title = 'Python')
<Book: Book object (3)>
>>> Book.objects.create(title = 'Php')
<Book: Book object (4)>
>>> Book.objects.create(title = 'Ruby')
<Book: Book object (5)>
>>>
>>> Author.objects.create(first_name = 'Jane' , last_name= 'Austin')
<Author: Author object (1)>
>>> Author.objects.create(first_name = 'Emily' , last_name= 'Dickinson')
<Author: Author object (2)>
>>> Author.objects.create(first_name = 'Fyodor' , last_name= 'Dostoevsky')
<Author: Author object (3)>
>>> Author.objects.create(first_name = 'William' , last_name= 'Shakespeare')
<Author: Author object (4)>
>>> Author.objects.create(first_name = 'Lau' , last_name= 'Tzu')
<Author: Author object (5)>
>>>
(Djangovenv)
lenovo@Abdallah-salhi-DV MINGW64 ~/OneDrive/desktop/axsos2/Axsos_Assignment/Axsos_Assignment/python-stack/django/django_orm/Books-Authors-shell/books_authors_proj (master)
$ py manage.py makemigrations
Migrations for 'books_authors_app':
  books_authors_app\migrations\0002_author_notes.py
    + Add field notes to author
(Djangovenv)
lenovo@Abdallah-salhi-DV MINGW64 ~/OneDrive/desktop/axsos2/Axsos_Assignment/Axsos_Assignment/python-stack/django/django_orm/Books-Authors-shell/books_authors_proj (master)
$ py manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, books_authors_app, contenttypes, sessions
Running migrations:
  Applying books_authors_app.0002_author_notes... OK
(Djangovenv)
lenovo@Abdallah-salhi-DV MINGW64 ~/OneDrive/desktop/axsos2/Axsos_Assignment/Axsos_Assignment/python-stack/django/django_orm/Books-Authors-shell/books_authors_proj (master)
$
$ py manage.py shell
8 objects imported automatically (use -v 2 for details).

Python 3.13.2 (tags/v3.13.2:4f8bb39, Feb  4 2025, 15:23:48) [MSC v.1942 64 bit (AMD64)] on win32
Type "help", "copyright", "credits" or "license" for more information.
(InteractiveConsole)
>>> x = Book.objects.get(title = 'C Sharp')
>>> x.title = 'C #'
>>> x.save()
>>> Author.objects.get(id=4)
<Author: Author object (4)>
>>> x=Author.objects.get(id=4)
>>> x.first_name = 'Bill'
>>> x.save()
>>>
>>> a = Book.objects.get(id=1)
>>> b = Book.objects.get(id=2)
>>> c = Author.objects.get(id=1)
>>> c.Authors.add(a)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'Author' object has no attribute 'Authors'
>>> c.books.add(a)
>>> c.books.add(b)
>>>
>>> a = Book.objects.get(id=1)
>>> b = Book.objects.get(id=2)
>>> c = Author.objects.get(id=1)
>>> c.Authors.add(a)
Traceback (most recent call last):
  File "<console>", line 1, in <module>
AttributeError: 'Author' object has no attribute 'Authors'
>>> c.books.add(a)
>>> c.books.add(b)
>>> a = Author.objects.get(id=2)
>>> b = Book.objects.get(id=3)
>>> a.books.add(b)
>>> b = Book.objects.get(id=2)
>>> a.books.add(b)
>>> b = Book.objects.get(id=1)
>>> a.books.add(b)
>>>
>> a = Author.objects.get(id=4)
>>> b = Book.objects.get(id=1)
>>> a.books.add(b)
>>> b = Book.objects.get(id=2)
>>> a.books.add(b)
>>> b = Book.objects.get(id=3)
>>> a.books.add(b)
>>> b = Book.objects.get(id=4)
>>> a.books.add(b)
>>> b = Book.objects.get(id=5)
>>> a.books.add(b)
>>>
>>> c.books.add(a)
>>> c.books.add(b)
>>> a = Author.objects.get(id=2)
>>> b = Book.objects.get(id=3)
>>> a.books.add(b)
>>> b = Book.objects.get(id=2)
>>> a.books.add(b)
>>> b = Book.objects.get(id=1)
>>> a.books.add(b)
>>> a = Author.objects.get(id=3)
>>> a.books.add(b)
>>> b = Book.objects.get(id=2)
>>> a.books.add(b)
>>> b = Book.objects.get(id=3)
>>> a.books.add(b)
>>> b = Book.objects.get(id=4)
>>> a.books.add(b)
>>> a = Author.objects.get(id=4)
>>> b = Book.objects.all()
>>> a.books.add(b)
>>>>
>>> b = Book.objects.get(id=3)
>>> b.Authors.all()
<QuerySet [<Author: Author object (2)>, <Author: Author object (3)>, <Author: Author object (4)>]>
>>>
>>> a = Author.objects.get(id=2)
>>> b.Authors.remove(a)
>>>

>> a = Author.objects.get(id=5)
>>> b = Book.objects.get(id=2)
>>> b.Authors.add(a)
>>>
>>> a = Author.objects.get(id=3)
>>> a.books.all()
<QuerySet [<Book: Book object (1)>, <Book: Book object (2)>, <Book: Book object (3)>, <Book: Book object (4)>]>
>>>
>>> b = Book.objects.get(id=5)
>>> b.Authors.all()
<QuerySet [<Author: Author object (4)>]>
>>>
